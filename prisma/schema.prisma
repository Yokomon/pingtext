// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  account        Account[]
  pings          Pings[]
  notification   Notification[]

  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])
  conversationsIds String[]       @db.ObjectId

  receivedPings    Pings[]  @relation("Receiver", fields: [receivedPingsIds], references: [id])
  receivedPingsIds String[] @db.ObjectId

  friend              Friend?
  friends             Friend[]       @relation("Friends")
  notificationSenders Notification[] @relation("NotificationSenders")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  id_token          String?  @db.String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  token_type        String?
  expires_at        Int?
  scope             String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  body        String
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String   @db.ObjectId
  receiver    User[]   @relation("Receiver", fields: [receiverIds], references: [id])
  receiverIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  isGroup    Boolean?
  userIds    String[] @db.ObjectId
  users      User[]   @relation(fields: [userIds], references: [id])
  lastPingAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
  friend      User     @relation("Friends", fields: [friendId], references: [id])
  friendId    String   @db.ObjectId
  requestSent Boolean  @default(false)
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String   @db.ObjectId
  sender      User     @relation("NotificationSenders", fields: [senderId], references: [id])
  senderId    String   @db.ObjectId
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
