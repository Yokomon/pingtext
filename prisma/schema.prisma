// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account        Account[]
  pings          Pings[]

  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])
  conversationsIds String[]       @db.ObjectId

  receivedPings    Pings[]  @relation("Receiver", fields: [receivedPingsIds], references: [id])
  receivedPingsIds String[] @db.ObjectId

  friendRequests Friend[] @relation("Requester")
  friends        Friend[] @relation(fields: [friendsIds], references: [id])
  friendsIds     String[] @db.ObjectId

  notification        Notification?
  notificationSenders Notification[] @relation("NotificationSenders")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  id_token          String?  @db.String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  token_type        String?
  expires_at        Int?
  scope             String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pings {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  audioUrl       String?
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String       @db.ObjectId
  receiver       User[]       @relation("Receiver", fields: [receiverIds], references: [id])
  receiverIds    String[]     @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  isGroup    Boolean?
  users      User[]    @relation(fields: [userIds], references: [id])
  userIds    String[]  @db.ObjectId
  lastPingAt DateTime?
  pings      Pings[]
  pingIds    String[]  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userIds         String[]     @db.ObjectId
  users           User[]       @relation(fields: [userIds], references: [id])
  requester       User         @relation("Requester", fields: [requesterId], references: [id])
  requesterId     String       @db.ObjectId
  requestSent     Boolean      @default(false)
  accepted        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  notification    Notification @relation(fields: [notificationIds], references: [id])
  notificationIds String       @unique @db.ObjectId
}

model Notification {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  recipient             User     @relation(fields: [recipientId], references: [id])
  recipientId           String   @unique @db.ObjectId
  sender                User     @relation("NotificationSenders", fields: [senderId], references: [id])
  senderId              String   @db.ObjectId
  message               String
  readBySender          Boolean  @default(false)
  readByRecipient       Boolean  @default(false)
  friendRequestAccepted Boolean  @default(false)
  friend                Friend?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
